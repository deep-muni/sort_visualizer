{"version":3,"sources":["component/VisualBox.js","component/SortButtons.js","component/ActionButton.js","App.js","serviceWorker.js","index.js"],"names":["VisualBox","props","state","arr","sort","bind","temp","i","Math","random","this","setState","val","ms","Promise","resolve","setTimeout","bubbleSort","flag","length","j","wait","temp_1","className","style","marginBottom","algorithm","action","map","num","Component","SortButtons","onClick","algo","ActionButton","App","sortAlgo","setAlgo","setAction","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8cc2e60.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport './VisualBox.css';\r\n\r\nclass VisualBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            arr: [],\r\n        }\r\n\r\n        this.sort = this.sort.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        let temp = [];\r\n\r\n        for(let i = 0; i < 64; i++){\r\n            temp[i] = i + 1;\r\n        }\r\n\r\n        temp.sort(() => Math.random() - 0.5);\r\n\r\n        this.setState({\r\n            arr: temp,\r\n        })\r\n    }\r\n\r\n    update(val){\r\n\r\n    }\r\n\r\n    wait(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    sort(){\r\n\r\n        let temp = this.state.arr;\r\n\r\n        switch (this.state.sort) {\r\n            case \"Selection Sort\":\r\n                break;\r\n            case \"Bubble Sort\":\r\n                break;\r\n            case \"Insertion Sort\":\r\n                break;\r\n            case \"Merge Sort\":\r\n                break;\r\n            case \"Quick Sort\":\r\n                break;\r\n            default:\r\n                this.bubbleSort(temp);\r\n        }\r\n\r\n    }\r\n\r\n    async bubbleSort(temp){\r\n        let flag = 0;\r\n        for(let i = 0; i < this.state.arr.length; i++){\r\n            for(let j = 0; j < (this.state.arr.length - i - 1); j++){\r\n                if(temp[j] > temp[j+1]){\r\n                    await this.wait(10);\r\n                    let temp_1 = temp[j];\r\n                    temp[j] = temp[j+1];\r\n                    temp[j+1] = temp_1;\r\n                    flag += 1;\r\n                }\r\n                this.setState({\r\n                    arr: temp\r\n                });\r\n            }\r\n            if(flag === 0)\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"visual-box\">\r\n                <p style={{marginBottom: '5px'}} className=\"text\">Sort: {this.props.algorithm}</p>\r\n                <p className=\"text\">Type: {this.props.action}</p>\r\n                <div className=\"box\">\r\n                    {\r\n                        this.state.arr.map(num => {\r\n                            return <div className=\"ele\">{num}</div>\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VisualBox;\r\n","import React, {Component} from \"react\";\r\n\r\nclass SortButtons extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"sortButtons\">\r\n                <button className=\"btn\" onClick={() => this.props.algo('Selection Sort')}>Selection Sort</button>\r\n                <button className=\"btn\" onClick={() => this.props.algo('Insertion Sort')}>Insertion Sort</button>\r\n                <button className=\"btn\" onClick={() => this.props.algo('Bubble Sort')}>Bubble Sort</button>\r\n                <button className=\"btn\" onClick={() => this.props.algo('Merge Sort')}>Merge Sort</button>\r\n                <button className=\"btn\" onClick={() => this.props.algo('Quick Sort')}>Quick Sort</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortButtons;\r\n","import React, {Component} from \"react\";\r\n\r\nclass ActionButton extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"actButtons\">\r\n                <button className=\"btn\" onClick={() => this.props.action('Colors')}>Colors</button>\r\n                <button className=\"btn\" onClick={() => this.props.action('Number')}>Number</button>\r\n                <button className=\"btn\">Randomize</button>\r\n                <button className=\"btn\">Sort</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActionButton;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport VisualBox from \"./component/VisualBox\";\nimport SortButtons from \"./component/SortButtons\";\nimport ActionButton from \"./component/ActionButton\";\n\nclass App extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortAlgo: 'Default (Bubble Sort)',\n            action: 'Default (Number)'\n        }\n\n        this.setAlgo = this.setAlgo.bind(this);\n        this.setAction = this.setAction.bind(this);\n    }\n\n    setAlgo(algo){\n        this.setState({\n            sortAlgo: algo\n        });\n    }\n\n    setAction(action){\n        this.setState({\n            action: action\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <SortButtons algo={this.setAlgo}/>\n                <VisualBox algorithm={this.state.sortAlgo} action={this.state.action}/>\n                <ActionButton action={this.setAction}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}